from concurrent.futures import *
import time
from Initial_Values import loop_T, N_calentar, N_mover
import concurrent.futures as cf
from tqdm.contrib.concurrent import process_map
from Ising import *

def main():

    start=time.time()   # Comienza a contar el tiempo de ejecución

    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------
    #--------------------------------------------INPUT--------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------

    #Vector con distintos tamaños de red para hacer varios seguidos
    N_vec = np.genfromtxt('Input/Input.csv', delimiter=',', dtype=np.int64, max_rows=1)[1:]

    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------
    #--------------------------------------------LOOP O ONE TEMP----------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------    

    if loop_T == 1:
        N=N_vec[0]
        print("Se ha entrado en el caso de una sola temperatura.")
        One_Temp(N)
    else:
        print("Se ha entrado en el caso de varias temperaturas.")
        #Para ejecutarlo solo una vez y dejarlo que haga varios tamaños de red
        executor = cf.ProcessPoolExecutor(max_workers=4) # Numero de nucleos que trabajan independientemente

        for N in N_vec:
            executor.submit(Loop_Temp, N, N_calentar*N**2, N_mover*N**2, str(N))

        """ lista=[]
        for i in range(len(N_vec)-1, -1, -1):
            lista.append((N_vec[i], N_calentar*N_vec[i]**2, N_mover*N_vec[i]**2))

        
        work=process_map(Loop_Temp, lista, max_workers=4) """


    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------
    #--------------------------------------------------------FIN----------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------
    #--------------------------------------------------------------------------------------------------------------------- 

    
    print("------------------------------------------------------------------")
    print("MAGNETO")
    print("""              ⣀⣤⣴⣶⣶⣶⣶⣦⣤⣀⠀⠀⠀⠀⠀⠀
    ⠀⠀⠀⢀⣴⡿⢛⣿⣿⣿⣿⣿⣿⣿⣿⡛⢿⣦⡀⠀⠀⠀
    ⠀⠀⣰⣿⡟⠀⠀⣿⣿⠿⠛⠛⠿⣿⣿⠀⠀⢻⣿⣆⠀⠀
    ⠀⣰⣿⣿⣿⡀⠀⠹⣿⠀⠀⠀⠀⣿⠏⠀⢀⣿⣿⣿⣧⠀
    ⢠⣿⣿⣿⣿⣿⣦⣤⣘⣇⠀⠀⣸⣁⣤⣴⣿⣿⣿⣿⣿⡄
    ⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇
    ⢸⣿⣿⣿⣿⠟⠛⠛⠻⣿⣿⣿⣿⠟⡛⠛⠻⣿⣿⣿⣿⡇
    ⢸⣿⣿⣿⣇⠀⠚⠛⠓⠈⠛⠛⠁⠚⠛⠓⠀⣹⣿⣿⣿⡇
    ⢸⣿⣿⣿⣿⣷⣤⣤⣄⠀⠀⠀⠀⣠⣤⣤⣾⣿⣿⣿⣿⡇
    ⢸⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⡇
    ⢸⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠿⠿⣿⣿⣿⣿⣿⣿⣿⣿⡇
    ⢸⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⡇
    ⢸⣿⣿⣿⣿⣿⣿⣿⣿⣦⣤⣤⣴⣿⣿⣿⣿⣿⣿⣿⣿⡇
    ⠘⠻⠿⣿⣿⣿⣿⣿⣿⠛⠛⠛⠛⣿⣿⣿⣿⣿⣿⠿⠟⠃
    ⠀⠀⠀⠀⠀⠉⠉⠉⠁⠀⠀⠀⠀⠉⠋⠉⠉⠀⠀⠀⠀⠀""")

    print("------------------------------------------------------------------")
    print("Duración de la simulación: ", time.time()-start, "segundos")


if __name__ == '__main__':
    main()